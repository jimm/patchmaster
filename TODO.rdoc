= To Do

* Windows observe contents to minimize redraws. Perhaps only need to observe
  PatchMaster itself?

* Scrolling in windows.

* When load a file, remember current position and try to restore it. Use
  Damerau-Levenshtein distance to compare names.


    # https://gist.github.com/182759 (git://gist.github.com/182759.git)
    # Referenced from http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance
    def dameraulevenshtein(seq1, seq2)
        oneago = nil
        thisrow = (1..seq2.size).to_a + [0]
        seq1.size.times do |x|
            twoago, oneago, thisrow = oneago, thisrow, [0] * seq2.size + [x + 1]
            seq2.size.times do |y|
                delcost = oneago[y] + 1
                addcost = thisrow[y - 1] + 1
                subcost = oneago[y - 1] + ((seq1[x] != seq2[y]) ? 1 : 0)
                thisrow[y] = [delcost, addcost, subcost].min
                if (x > 0 and y > 0 and seq1[x] == seq2[y-1] and seq1[x-1] == seq2[y] and seq1[x] != seq2[y])
                    thisrow[y] = [thisrow[y], twoago[y-2] + 1].min
                end
            end
        end
        return thisrow[seq2.size - 1]
    end

* Editing. Can we simply call $EDITOR instead of simply loading/reloading
  files, allow everything to be edited in the app.

* Display instruments?

* Alternate display that only shows song and patch names and little else?

* Do I need to handle running bytes in Connection#midi_in, or does UniMIDI
  take care of that?

* Should each input get its own thread?

* Fix PromptWindow display cleanup.

* Help screen.

* Documentation. Modify original PatchMaster docs.

* Handle window resizing (SIGWINCH).

* Trap signals like ^C. Don't do work, just set flag to be handled next time
  through loop.

* "Are you sure?" on quit? --- but I hate that.

* Is UniMIDI gets_data blocking?

* Programmable MIDI messages?

* See list of features at http://jimmenard.com/projects/keymaster/
