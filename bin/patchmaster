#!/usr/bin/env ruby
#
# usage: patchmaster [-l] [-v] [-n] [-i] [-w] [-p port] [-d] [pm_file]
#
# Starts PatchMaster and optionally loads pm_file.
#
# -l lists all available MIDI inputs and outputs and exits.
#
# -v outputs the version number and exits.
#
# The -n flag tells PatchMaster to not use MIDI. All MIDI errors such as not
# being able to connect to the MIDI instruments specified in pm_file are
# ignored, and no MIDI data is sent/received. That is useful if you want to
# run PatchMaster without actually talking to any MIDI instruments.
#
# To run PatchMaster from within an IRB session use -i. Reads
# ./.patchmasterrc if it exists, $HOME/.patchmasterrc if not. See the
# documentation for details on the commands that are available.
#
# To run PatchMaster using a Web browser GUI use -w and point your browser
# at http://localhost:4567. To change the port, use -p.
#
# The -d flag turns on debug mode. The app becomes slightly more verbose and
# logs everything to `/tmp/pm_debug.txt'.

require 'optparse'

use_midi = true
gui = :curses
port = nil
OptionParser.new do |opts|
  opts.banner = 'usage: patchmaster [options] [pm_file]'
  opts.on('-d', '--debug', 'Turn on debug mode') { $DEBUG = true }
  opts.on('-l', '--list', 'List MIDI inputs and outputs and exit') do
    require_relative 'portmidi_list'
    exit 0
  end
  opts.on('-n', '--no-midi', 'Turn off MIDI processing') { use_midi = false }
  opts.on('-i', '--irb', 'Use an IRB console') { gui = :irb }
  opts.on('-w', '--web', 'Use a Web browser GUI') { gui = :web }
  opts.on('-p', '--port PORT', 'Web browser GUI port number') { |opt| port = opt.to_i }
  opts.on('-v', '--version', 'Show version number and exit') do
    version_line = IO.readlines(File.join(File.dirname(__FILE__), '../Rakefile')).grep(/GEM_VERSION\s*=/).first
    version_line =~ /(\d+\.\d+\.\d+)/
    puts "patchmaster #{Regexp.last_match(1)}"
    exit 0
  end
  opts.on_tail('-h', '-?', '--help', 'Show this message') do
    puts opts
    exit 0
  end
end.parse!(ARGV)

# Must require patchmaster here, after handling options, because Singleton
# initialize code checks $DEBUG.
begin
  require 'patchmaster'
  require 'patchmaster/curses/main' # for function key symbols
rescue LoadError
  $LOAD_PATH << File.join(__dir__, '../lib')
  retry
end

pm = PM::PatchMaster.instance
pm.use_midi = use_midi
case gui
when :curses
  pm.gui = PM::Main.instance
when :irb
  require 'patchmaster/irb/irb'
  pm.gui = PM::IRB.instance
when :web
  require 'patchmaster/web/sinatra_app'
  warn 'calling instance' # DEBUG
  app = PM::SinatraApp.instance
  app.port = port if port
  pm.gui = app
end
pm.load(ARGV[0]) if ARGV[0]
pm.run
