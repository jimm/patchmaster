#!/usr/bin/env ruby
#
# usage: patchmaster [-n] [-w] [-t] [-d] [pm_file]
#
# Starts PatchMaster and optionally loads pm_file.
#
# The -n flag tells PatchMaster to not use MIDI. All MIDI errors such as not
# being able to connect to the MIDI instruments specified in pm_file are
# ignored, and no MIDI data is sent/received. That is useful if you want to
# run PatchMaster without actually talking to any MIDI instruments.
#
# To run PatchMaster using a Web browser GUI use -w and point your browser
# at http://localhost:4567.
#
# To run PatchMaster without a GUI use -t.

require 'optparse'

use_midi = true
gui = :curses
OptionParser.new do |opts|
  opts.banner = "usage: patchmaster [options] [pm_file]"
  opts.on("-d", "--debug", "Turn on debug mode") { $DEBUG = true }
  opts.on("-n", "--no-midi", "Turn off MIDI processing") { use_midi = false }
  opts.on("-w", "--web", "Use a Web browser GUI") { gui = :web }
  opts.on("-t", "--text", "--nw", "--no-window", "No windows") { gui = :text }
  opts.on_tail("-h", "-?", "--help", "Show this message") do
    puts opts
    exit 0
  end
end.parse!(ARGV)

# Must require patchmaster here, after handling options, because Singleton
# initialize code checks $DEBUG.
require 'patchmaster'

pm = PM::PatchMaster.instance
pm.no_midi! if !use_midi
pm.load(ARGV[0]) if ARGV[0]
pm.gui = case gui
         when :curses
           require 'patchmaster/curses/main'
           PM::Main.instance
         when :web
           require 'patchmaster/web/sinatra_app'
           PM::SinatraApp.instance
         end
pm.run
