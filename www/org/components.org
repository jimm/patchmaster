#+title: Components
#+html: <!--#include virtual="header.html"-->
#+options: num:nil

* Components

#+begin_quote
"The time has come," the Walrus said,\\
"To talk of many things:\\
Of shoes - and ships - and sealing wax -\\
Of cabbages - and kings -\\
And why the sea is boiling hot -\\
And whether pigs have wings."\\
\\
-- Lewis Carroll, /Through the Looking-Glass/
#+end_quote

This section describes the things that make up a PatchMaster document:
instruments, songs, patches, connections, triggers, messages, and filters.
Though it describes them, it doesn't tell you how to describe them to
PatchMaster. For that, see the [[file:file_format.org][file format]] page.

* Instruments

You have to describe your MIDI instruments' inputs and outputs to
PatchMaster. Each instrument needs a symbol (a usually short name
starting with ":"), specify which UNIMidi port number it uses, and
optionally give it a name. If you don't give it a name, PatchMaster will
display the name that UNIMidi uses.

Input instrument symbols must be unique, as must output instruments. The
same symbol can be used for an input and an output, however.

As ane example, say you have a keyboard controller that doesn't generate any
sound on port 0 of your MIDI interface, a typical keyboard synth (both
controller and sound generator) on purt 1, and a rack-mount sound generator
on port 2. Here's what that might look like in your PatchMaster file:

#+begin_src ruby
  input  0, :controller, 'My Controller'
  input  1, :kbd, 'The Keyboard'
  output 1, :kbd, 'The Keyboard'
  output 2, :rack                 # Will use UNIMidi name
#+end_src

* Messages

A message is a named array of MIDI bytes. Messages can be sent using message
keys, via triggers, or even from filters. Messages are sent to all output
instruments.

** Message Keys

You can assign messages to keys when using the PatchMaster GUI. Whenever the
assigned key is pressed, the corresponding message is sent.

* Triggers

A trigger looks for a particular incoming MIDI message from a paticular
input instrument and runs a block of code when it is seen. The blocks can
contain any Ruby code. Typically triggers are used for navigation or sending
named messages.

All triggers are executed by the =PM::PatchMaster= instance. Practially
speaking this means you can call any of the methods of that object or its
=PM::Cursor= object, including but not limited to

- =next_song=, =prev_song=, =next_patch=, =prev_patch=
- =goto_song=
- =send_message=
- =panic=

* Songs

A song is a named collection of patches that allow you to control your MIDI
setup. A song can have any number of patches. You can step forward and
backward through the patches in a song using the GUI movement keys or
triggers.

* Patches

A patch is a named collection of connections that can modify the MIDI data.
The simplest connection connects one MIDI input device directly to another
on a single channel.

** Start and Stop Bytes

A patch also has optional /start bytes/ and /stop bytes/. These are arrays
of MIDI bytes that can contain any MIDI data such as patch changes, volume
controller settings, note on or off messages (for those looong drones), and
system exclusive messages.

* Connections

A connection connects an input instrument (all incoming channels or just
one) to a single output channel of an output instrument. All messages coming
from the input instruments are changed to be on the output instrument
channel.

When talking about the "notes" that a connection modifies, this means all
MIDI messages that have note values: note on, note off, and polyphonic
pressure.

** Program Changes

A connection can optionally send a bank number and program change to its
output instrument's channel. If a bank number is specified, first the bank
change is sent then the program change.

** Zones

A connection can optionally specify a zone: a range of keys outside of which
all MIDI data will be ignored. Since a patch can contain multiple
connections, this lets you split and layer your controllers, sending some
notes to some synths but not others.

** Transposes

A connection can transpose all notes by a fixed value.

** Filters

Filters let you do anything you want to the data, including filter out
notes, transpose, modify controller values --- anything. That's because a
filter has a block of Ruby code that gets executed for every message that
goes through the connection.

Filters are applied as the last step in a connection's modification of the
MIDI data. This means that the status byte's channel is already changed to
the output instrument's channel for this connection (assuming the message is
a channel message).

The filter's block must return the array of bytes you want sent to the
output. Don't use the "return" keyword; simply add the bytes as the last
thing in the block.

* Song Lists

A song list is a list of songs. A song can appear in more than one song
list. One special song list called "All Songs" contains the list of all
songs.
